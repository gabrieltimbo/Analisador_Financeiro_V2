# -*- coding: utf-8 -*-
"""Analisador Financeiro V2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KSwhMO_2MysN-c6GuPZgl3tWv3ysM63s
"""

# -*- coding: utf-8 -*-
"""Analisador Financeiro Multi-idioma V3"""

import streamlit as st
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
import io
import datetime

# ==============================
# üåç Dicion√°rio de Idiomas
# ==============================
LANG = {
    "pt": {
        "titulo": "üîí Analisador Financeiro de Clientes",
        "senha": "Digite a senha para acessar o app",
        "senha_incorreta": "Senha incorreta! Acesso negado.",
        "info_cliente": "üìå Informa√ß√µes do Cliente",
        "nome_cliente": "Nome do Cliente",
        "data_analise": "Data da An√°lise",
        "contas_receber": "Contas a Receber (R$)",
        "ativo_circ": "Ativo Circulante (R$)",
        "estoque": "Estoques (R$)",
        "ativo_total": "Ativo Total (R$)",
        "receita": "Receita L√≠quida (R$)",
        "ebitda": "EBITDA (R$)",
        "caixa": "Caixa Dispon√≠vel (R$)",
        "passivo_circ": "Passivo Circulante (R$)",
        "passivo_total": "Passivo Total (R$)",
        "dividas": "D√≠vidas Totais (R$)",
        "patrimonio": "Patrim√¥nio L√≠quido (R$)",
        "lucro": "Lucro L√≠quido (R$)",
        "prazo_fat": "Prazo m√©dio de faturamento (dias)",
        "perfil": "PERFIL DE CR√âDITO",
        "perfil_opts": ["NORMAL", "PESSIMISTA"],
        "analista": "Nome do Analista",
        "observacao": "Observa√ß√£o (ex.: este relat√≥rio √© apenas uma sugest√£o)",
        "calcular": "üí° Calcular An√°lise Financeira",
        "kpis": "üìä KPIs Financeiros",
        "rating": "‚≠ê Rating do Cliente:",
        "recomendacoes": "üìù Recomenda√ß√µes",
        "pdf": "üìÑ Exportar PDF",
        "baixar_pdf": "üì• Baixar PDF"
    },
    "en": {
        "titulo": "üîí Client Financial Analyzer",
        "senha": "Enter the password to access the app",
        "senha_incorreta": "Incorrect password! Access denied.",
        "info_cliente": "üìå Client Information",
        "nome_cliente": "Client Name",
        "data_analise": "Analysis Date",
        "contas_receber": "Accounts Receivable ($)",
        "ativo_circ": "Current Assets ($)",
        "estoque": "Inventory ($)",
        "ativo_total": "Total Assets ($)",
        "receita": "Net Revenue ($)",
        "ebitda": "EBITDA ($)",
        "caixa": "Cash Available ($)",
        "passivo_circ": "Current Liabilities ($)",
        "passivo_total": "Total Liabilities ($)",
        "dividas": "Total Debt ($)",
        "patrimonio": "Equity ($)",
        "lucro": "Net Income ($)",
        "prazo_fat": "Average Billing Period (days)",
        "perfil": "CREDIT PROFILE",
        "perfil_opts": ["NORMAL", "PESSIMISTIC"],
        "analista": "Analyst Name",
        "observacao": "Observation (e.g., this report is only a suggestion)",
        "calcular": "üí° Run Financial Analysis",
        "kpis": "üìä Financial KPIs",
        "rating": "‚≠ê Client Rating:",
        "recomendacoes": "üìù Recommendations",
        "pdf": "üìÑ Export PDF",
        "baixar_pdf": "üì• Download PDF"
    }
}

# ==============================
# üåç Seletor de Idioma
# ==============================
if "lang" not in st.session_state:
    st.session_state["lang"] = "pt"

col1, col2 = st.columns(2)
if col1.button("üáßüá∑"):
    st.session_state["lang"] = "pt"
if col2.button("üá∫üá∏"):
    st.session_state["lang"] = "en"

lang = st.session_state["lang"]
TXT = LANG[lang]

# ==============================
# 0Ô∏è‚É£ Login
# ==============================
st.title(TXT["titulo"])
senha = st.text_input(TXT["senha"], type="password")
if senha != "minhaSenhaSegura":
    st.warning(TXT["senha_incorreta"])
    st.stop()

# ==============================
# 1Ô∏è‚É£ Fun√ß√£o de an√°lise financeira
# ==============================
def analise_financeira(contas_receber, receita, ativo_circ, estoque, ativo_total,
                       passivo_circ, passivo_total, dividas, patrimonio, lucro, ebitda,
                       caixa, prazo_faturamento, perfil="NORMAL"):
    indicadores = {}
    indicadores['Liquidez Corrente'] = round((ativo_circ / passivo_circ) if passivo_circ else 0, 2)
    indicadores['Liquidez Seca'] = round(((ativo_circ - estoque) / passivo_circ) if passivo_circ else 0, 2)
    indicadores['Endividamento Total (%)'] = round((passivo_total / ativo_total) * 100 if ativo_total else 0, 2)
    indicadores['Composi√ß√£o do Endividamento (%)'] = round((passivo_circ / passivo_total) * 100 if passivo_total else 0, 2)
    indicadores['Alavancagem (D√≠vida / PL)'] = round((dividas / patrimonio) if patrimonio else 0, 2)
    indicadores['Margem L√≠quida (%)'] = round((lucro / receita) * 100 if receita else 0, 2)
    indicadores['EBITDA / Receita (%)'] = round((ebitda / receita) * 100 if receita else 0, 2)
    indicadores['ROE (%)'] = round((lucro / patrimonio) * 100 if patrimonio else 0, 2)

    # Score simples
    score = 0
    if indicadores['Endividamento Total (%)'] < 50: score += 2
    if indicadores['Liquidez Corrente'] > 1.2: score += 2
    if indicadores['Liquidez Seca'] > 1: score += 1
    if indicadores['Margem L√≠quida (%)'] > 10: score += 2
    if indicadores['EBITDA / Receita (%)'] > 15: score += 1
    if indicadores['ROE (%)'] > 10: score += 1

    # Rating
    if score >= 9: rating = "A"
    elif score >= 7: rating = "B"
    elif score >= 5: rating = "C"
    elif score >= 3: rating = "D"
    else: rating = "E"
    indicadores['Rating do Cliente'] = rating

    # Limite de cr√©dito
    fatura_mensal = (contas_receber / prazo_faturamento) * 30  
    fator_rating = {"A":1.2, "B":1.0, "C":0.8, "D":0.5, "E":0.3}.get(rating,1)
    limite_credito_ajustado = fatura_mensal * fator_rating
    if perfil.upper() == "PESSIMISTA": limite_credito_ajustado *= 0.7
    if rating == "E": limite_credito_ajustado = 1
    indicadores['Limite de Cr√©dito Sugerido (R$)'] = round(limite_credito_ajustado, 2)
    return indicadores

# ==============================
# 2Ô∏è‚É£ Layout Interativo
# ==============================
st.subheader(TXT["info_cliente"])
col1, col2 = st.columns(2)
with col1:
    nome_cliente = st.text_input(TXT["nome_cliente"])
    data_analise = st.date_input(TXT["data_analise"], datetime.date.today())
    contas_receber = st.number_input(TXT["contas_receber"], min_value=0.0)
    ativo_circ = st.number_input(TXT["ativo_circ"], min_value=0.0)
    estoque = st.number_input(TXT["estoque"], min_value=0.0)
    ativo_total = st.number_input(TXT["ativo_total"], min_value=0.0)
    receita = st.number_input(TXT["receita"], min_value=0.0)
    ebitda = st.number_input(TXT["ebitda"], min_value=0.0)
    caixa = st.number_input(TXT["caixa"], min_value=0.0)
    nome_analista = st.text_input(TXT["analista"])
    observacao = st.text_area(TXT["observacao"])

with col2:
    passivo_circ = st.number_input(TXT["passivo_circ"], min_value=0.0)
    passivo_total = st.number_input(TXT["passivo_total"], min_value=0.0)
    dividas = st.number_input(TXT["dividas"], min_value=0.0)
    patrimonio = st.number_input(TXT["patrimonio"], min_value=0.0)
    lucro = st.number_input(TXT["lucro"])
    prazo_faturamento = st.number_input(TXT["prazo_fat"], min_value=1)

perfil = st.selectbox(TXT["perfil"], TXT["perfil_opts"])

# ==============================
# 3Ô∏è‚É£ Bot√£o de c√°lculo
# ==============================
if st.button(TXT["calcular"]):
    resultado = analise_financeira(contas_receber, receita, ativo_circ, estoque, ativo_total,
                                   passivo_circ, passivo_total, dividas, patrimonio, lucro, ebitda,
                                   caixa, prazo_faturamento, perfil=perfil)

    # KPIs
    st.subheader(TXT["kpis"])
    for k, v in resultado.items():
        if "R$" in k:
            st.metric(label=k, value=f"R$ {v:,.2f}")
        else:
            st.metric(label=k, value=f"{v:.2f}")

    # Rating
    rating = resultado['Rating do Cliente']
    cores_rating = {"A":"green","B":"blue","C":"yellow","D":"orange","E":"red"}
    st.markdown(f"**{TXT['rating']}** <span style='color:{cores_rating[rating]}; font-size:20px'>{rating}</span>", unsafe_allow_html=True)

    # Recomenda√ß√µes
    st.subheader(TXT["recomendacoes"])
    st.info(f"{rating} ‚Üí Ajuste necess√°rio conforme risco.")

    # PDF
    st.subheader(TXT["pdf"])
    pdf_buffer = io.BytesIO()
    with PdfPages(pdf_buffer) as pdf:
        plt.figure(figsize=(8,11))
        plt.axis('off')
        texto = f"Relat√≥rio Financeiro\n\n"
        texto += f"{TXT['nome_cliente']}: {nome_cliente}\n"
        texto += f"{TXT['data_analise']}: {data_analise}\n"
        texto += f"{TXT['analista']}: {nome_analista}\n"
        texto += f"{TXT['observacao']}: {observacao}\n\n"
        texto += "=== Indicadores ===\n"
        for k, v in resultado.items():
            texto += f"{k}: {v}\n"
        plt.text(0, 1, texto, ha='left', va='top', fontsize=10, wrap=True)
        pdf.savefig()
        plt.close()
    pdf_buffer.seek(0)

    st.download_button(
        label=TXT["baixar_pdf"],
        data=pdf_buffer,
        file_name=f"Relatorio_{nome_cliente}.pdf",
        mime="application/pdf"
    )
