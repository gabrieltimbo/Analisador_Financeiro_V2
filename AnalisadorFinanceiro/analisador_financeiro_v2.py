# -*- coding: utf-8 -*-
"""Analisador Financeiro V2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KSwhMO_2MysN-c6GuPZgl3tWv3ysM63s
"""

# -*- coding: utf-8 -*-
"""Analisador Financeiro V6"""

import streamlit as st
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
import io
import datetime

# ==============================
# 0️⃣ Login + Idioma + Nome do Analista
# ==============================
st.title("🔒 Analisador Financeiro de Clientes")
senha = st.text_input("Digite a senha para acessar o app", type="password")
if senha != "minhaSenhaSegura":
    st.warning("Senha incorreta! Acesso negado.")
    st.stop()

# Seleção de idioma
idioma = st.radio("Idioma / Language", ("🇧🇷 Português", "🇺🇸 English"))

# Função para textos de acordo com idioma
def text(key):
    textos = {
        "pt": {
            "nome_analista": "Nome do Analista",
            "informe_analista": "Por favor, informe o nome do analista para prosseguir.",
            "informacoes_cliente": "📌 Informações do Cliente",
            "perfil_credito": "PERFIL DE CRÉDITO",
            "risco_credito_externo": "Risco de Crédito Externo",
            "calcular": "💡 Calcular Análise Financeira",
            "exportar_pdf": "📄 Exportar PDF",
            "recomendacoes": "📝 Recomendações",
        },
        "en": {
            "nome_analista": "Analyst Name",
            "informe_analista": "Please provide the analyst's name to proceed.",
            "informacoes_cliente": "📌 Client Information",
            "perfil_credito": "CREDIT PROFILE",
            "risco_credito_externo": "External Credit Risk",
            "calcular": "💡 Calculate Financial Analysis",
            "exportar_pdf": "📄 Export PDF",
            "recomendacoes": "📝 Recommendations",
        }
    }
    return textos["pt" if idioma.startswith("🇧🇷") else "en"][key]

# Nome do Analista
nome_analista = st.text_input(text("nome_analista"))
if not nome_analista:
    st.warning(text("informe_analista"))
    st.stop()

# ==============================
# 1️⃣ Função de análise financeira
# ==============================
def analise_financeira(contas_receber, receita, ativo_circ, estoque, ativo_total,
                       passivo_circ, passivo_total, dividas, patrimonio, lucro, ebitda,
                       caixa, prazo_faturamento, perfil="NORMAL", risco_credito_externo="Médio Risco"):

    indicadores = {}

    # --- Liquidez ---
    indicadores['Liquidez Corrente'] = round((ativo_circ / passivo_circ) if passivo_circ else 0, 2)
    indicadores['Liquidez Seca'] = round(((ativo_circ - estoque) / passivo_circ) if passivo_circ else 0, 2)

    # --- Estrutura de Capital ---
    indicadores['Endividamento Total (%)'] = round((passivo_total / ativo_total) * 100 if ativo_total else 0, 2)
    indicadores['Composição do Endividamento (%)'] = round((passivo_circ / passivo_total) * 100 if passivo_total else 0, 2)
    indicadores['Alavancagem (Dívida / PL)'] = round((dividas / patrimonio) if patrimonio else 0, 2)

    # --- Rentabilidade ---
    indicadores['Margem Líquida (%)'] = round((lucro / receita) * 100 if receita else 0, 2)
    indicadores['EBITDA / Receita (%)'] = round((ebitda / receita) * 100 if receita else 0, 2)
    indicadores['ROE (%)'] = round((lucro / patrimonio) * 100 if patrimonio else 0, 2)

    # --- Score para Rating ---
    score = 0
    if indicadores['Endividamento Total (%)'] < 50: score += 2
    if indicadores['Liquidez Corrente'] > 1.2: score += 2
    if indicadores['Liquidez Seca'] > 1: score += 1
    if indicadores['Margem Líquida (%)'] > 10: score += 2
    if indicadores['EBITDA / Receita (%)'] > 15: score += 1
    if indicadores['ROE (%)'] > 10: score += 1

    # --- Ajuste pelo Risco de Crédito Externo ---
    ajuste_externo = {
        "Muito Baixo Risco": 2,
        "Baixo Risco": 1,
        "Médio Risco": 0,
        "Alto Risco": -1,
        "Muito Alto Risco": -2,
        "Very Low Risk": 2,
        "Low Risk": 1,
        "Medium Risk": 0,
        "High Risk": -1,
        "Very High Risk": -2
    }
    score += ajuste_externo.get(risco_credito_externo, 0)

    # Rating final
    if score >= 9: rating = "A"
    elif score >= 7: rating = "B"
    elif score >= 5: rating = "C"
    elif score >= 3: rating = "D"
    else: rating = "E"
    indicadores['Rating do Cliente'] = rating

    # --- Limite de crédito ---
    fatura_mensal = (contas_receber / prazo_faturamento) * 30  
    fator_prazo = 1 + min(prazo_faturamento / 60, 0.2)
    fator_rating = {"A":1.2, "B":1.0, "C":0.8, "D":0.5, "E":0.3}.get(rating,1)
    fator_margem = 1 + (min(indicadores['Margem Líquida (%)'], 15)/100)
    fator_caixa = 0.3 + min(caixa / (dividas + 1e-6), 0.5)

    comp_passivo_circ = indicadores['Composição do Endividamento (%)'] / 100
    if comp_passivo_circ > 0.6: fator_passivo = 0.5
    elif comp_passivo_circ > 0.4: fator_passivo = 0.7
    else: fator_passivo = 1

    if indicadores['Alavancagem (Dívida / PL)'] > 5: fator_alavancagem = 0.5
    elif indicadores['Alavancagem (Dívida / PL)'] > 3: fator_alavancagem = 0.7
    else: fator_alavancagem = 1

    limite_credito_ajustado = fatura_mensal * fator_prazo * fator_rating * fator_margem * fator_caixa * fator_passivo * fator_alavancagem

    if perfil.upper() == "PESSIMISTA": limite_credito_ajustado *= 0.7
    if rating == "E": limite_credito_ajustado = 1

    indicadores['Limite de Crédito Sugerido (R$)'] = round(limite_credito_ajustado, 2)
    return indicadores

def recomendacoes(rating, idioma="pt"):
    rec_pt = {
        "A": "Cliente saudável para crédito. Monitorar apenas fluxos futuros.",
        "B": "Cliente com bom histórico. Revisar condições de pagamento periódicas.",
        "C": "Risco moderado. Avaliar garantias e limites de crédito.",
        "D": "Risco elevado. Exigir garantias adicionais e reduzir limites.",
        "E": "Alto risco. Evitar concessão de crédito sem garantias sólidas."
    }
    rec_en = {
        "A": "Healthy client for credit. Monitor only future cash flows.",
        "B": "Client with good history. Review payment terms periodically.",
        "C": "Moderate risk. Evaluate guarantees and credit limits.",
        "D": "High risk. Require additional guarantees and reduce limits.",
        "E": "Very high risk. Avoid granting credit without solid guarantees."
    }
    return rec_pt[rating] if idioma=="pt" else rec_en[rating]

# ==============================
# 2️⃣ Layout Interativo
# ==============================
st.subheader(text("informacoes_cliente"))
col1, col2 = st.columns(2)

with col1:
    nome_cliente = st.text_input("Nome do Cliente" if idioma=="pt" else "Client Name")
    data_analise = st.date_input("Data da Análise" if idioma=="pt" else "Analysis Date", datetime.date.today())
    contas_receber = st.number_input("Contas a Receber (R$)" if idioma=="pt" else "Accounts Receivable (R$)", min_value=0.0)
    ativo_circ = st.number_input("Ativo Circulante (R$)" if idioma=="pt" else "Current Assets (R$)", min_value=0.0)
    estoque = st.number_input("Estoques (R$)" if idioma=="pt" else "Inventory (R$)", min_value=0.0)
    ativo_total = st.number_input("Ativo Total (R$)" if idioma=="pt" else "Total Assets (R$)", min_value=0.0)
    receita = st.number_input("Receita Líquida (R$)" if idioma=="pt" else "Net Revenue (R$)", min_value=0.0)
    ebitda = st.number_input("EBITDA (R$)", min_value=0.0)
    caixa = st.number_input("Caixa Disponível (R$)" if idioma=="pt" else "Available Cash (R$)", min_value=0.0)
    observacao = st.text_area("Observação (ex.: este relatório é apenas uma sugestão)" if idioma=="pt" else "Observation (e.g.: this report is only a suggestion)", 
                              value="Este relatório é apenas uma sugestão e não deve ser usado como decisão final." if idioma=="pt" else "This report is only a suggestion and should not be used as final decision.")

with col2:
    passivo_circ = st.number_input("Passivo Circulante (R$)" if idioma=="pt" else "Current Liabilities (R$)", min_value=0.0)
    passivo_total = st.number_input("Passivo Total (R$)" if idioma=="pt" else "Total Liabilities (R$)", min_value=0.0)
    dividas = st.number_input("Dívidas Totais (R$)" if idioma=="pt" else "Total Debts (R$)", min_value=0.0)
    patrimonio = st.number_input("Patrimônio Líquido (R$)" if idioma=="pt" else "Equity (R$)", min_value=0.0)
    lucro = st.number_input("Lucro Líquido (R$)" if idioma=="pt" else "Net Profit (R$)")
    prazo_faturamento = st.number_input("Prazo médio de faturamento (dias)" if idioma=="pt" else "Average Billing Term (days)", min_value=1)
    risco_credito_externo = st.selectbox(text("risco_credito_externo"), 
                                         ["Muito Baixo Risco", "Baixo Risco", "Médio Risco", "Alto Risco", "Muito Alto Risco"] if idioma=="pt" else ["Very Low Risk", "Low Risk", "Medium Risk", "High Risk", "Very High Risk"])

perfil = st.selectbox(text("perfil_credito"), ["NORMAL", "PESSIMISTA"] if idioma=="pt" else ["NORMAL", "PESSIMISTIC"])

# ==============================
# 3️⃣ Botão de cálculo
# ==============================
if st.button(text("calcular")):
    resultado = analise_financeira(contas_receber, receita, ativo_circ, estoque, ativo_total,
                                   passivo_circ, passivo_total, dividas, patrimonio, lucro, ebitda,
                                   caixa, prazo_faturamento, perfil=perfil, 
                                   risco_credito_externo=risco_credito_externo)

    # ----- KPIs com emojis -----
    st.subheader("📊 KPIs Financeiros")
    kpis = {
        "Liquidez Corrente": ("🟢" if resultado['Liquidez Corrente']>1.2 else "🟠", resultado['Liquidez Corrente']),
        "Liquidez Seca": ("🟢" if resultado['Liquidez Seca']>1 else "🟠", resultado['Liquidez Seca']),
        "Endividamento Total (%)": ("🟢" if resultado['Endividamento Total (%)']<50 else "🔴", resultado['Endividamento Total (%)']),
        "Composição do Endividamento (%)": ("🟢" if resultado['Composição do Endividamento (%)']<50 else "🟠", resultado['Composição do Endividamento (%)']),
        "Alavancagem (Dívida / PL)": ("🟠" if resultado['Alavancagem (Dívida / PL)']>5 else "🟢", resultado['Alavancagem (Dívida / PL)']),
        "Margem Líquida (%)": ("🟢" if resultado['Margem Líquida (%)']>10 else "🟠", resultado['Margem Líquida (%)']),
        "EBITDA / Receita (%)": ("🟢" if resultado['EBITDA / Receita (%)']>15 else "🟠", resultado['EBITDA / Receita (%)']),
        "ROE (%)": ("🟢" if resultado['ROE (%)']>10 else "🟠", resultado['ROE (%)']),
        "Limite de Crédito Sugerido (R$)": ("🟢", resultado['Limite de Crédito Sugerido (R$)'])
    }

    for k, (emoji, valor) in kpis.items():
        if "R$" in k:
            st.metric(label=f"{emoji} {k}", value=f"R$ {valor:,.2f}")
        else:
            st.metric(label=f"{emoji} {k}", value=f"{valor:.2f}")

    # Rating
    rating = resultado['Rating do Cliente']
    cores_rating = {"A":"green","B":"blue","C":"yellow","D":"orange","E":"red"}
    st.markdown(f"**⭐ Rating do Cliente:** <span style='color:{cores_rating[rating]}; font-size:20px'>{rating}</span>", unsafe_allow_html=True)

    # Recomendações
    st.subheader(text("recomendacoes"))
    st.info(recomendacoes(rating, idioma="pt" if idioma.startswith("🇧🇷") else "en"))

    # ----- PDF -----
    st.subheader(text("exportar_pdf"))
    pdf_buffer = io.BytesIO()
    with PdfPages(pdf_buffer) as pdf:
        plt.figure(figsize=(8,11))
        plt.axis('off')
        texto = f"Relatório Financeiro do Cliente\n\n"
        texto += f"Analista: {nome_analista}\nCliente: {nome_cliente}\nData da Análise: {data_analise}\n"
        texto += f"Risco de Crédito Externo: {risco_credito_externo}\nObservação: {observacao}\n\n"
        texto += f"=== Inputs Registrados ===\n"
        texto += f"Contas a Receber: R$ {contas_receber:,.2f}\nAtivo Circulante: R$ {ativo_circ:,.2f}\nEstoques: R$ {estoque:,.2f}\nAtivo Total: R$ {ativo_total:,.2f}\n"
        texto += f"Receita Líquida: R$ {receita:,.2f}\nEBITDA: R$ {ebitda:,.2f}\nCaixa: R$ {caixa:,.2f}\n"
        texto += f"Passivo Circulante: R$ {passivo_circ:,.2f}\nPassivo Total: R$ {passivo_total:,.2f}\nDívidas Totais: R$ {dividas:,.2f}\nPatrimônio Líquido: R$ {patrimonio:,.2f}\nLucro Líquido: R$ {lucro:,.2f}\n"
        texto += f"Prazo médio de faturamento: {prazo_faturamento} dias\nPerfil de Crédito: {perfil}\n\n"
        texto += f"=== Indicadores Calculados ===\n"
        for k, v in resultado.items():
            texto += f"{k}: {v}\n"
        plt.text(0, 1, texto, ha='left', va='top', fontsize=10, wrap=True)
        pdf.savefig()
        plt.close()
    pdf_buffer.seek(0)

    st.download_button(
        label="📥 Baixar PDF" if idioma=="pt" else "📥 Download PDF",
        data=pdf_buffer,
        file_name=f"Relatorio_{nome_cliente}.pdf",
        mime="application/pdf"
    )
