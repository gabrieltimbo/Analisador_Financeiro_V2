# -*- coding: utf-8 -*-
"""Analisador Financeiro V2
Automatically generated by Colab.
Original file is located at
https://colab.research.google.com/drive/1KSwhMO_2MysN-c6GuPZgl3tWv3ysM63s
"""

"""Analisador Financeiro Global"""

import streamlit as st
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
import io
import datetime

# ==============================
# 0Ô∏è‚É£ Login e idioma
# ==============================
st.title("üîí Analisador Financeiro de Clientes")

# Nome do analista
nome_analista = st.text_input("Nome do Analista")

# Senha
senha = st.text_input("Digite a senha para acessar o app", type="password")
if senha != "minhaSenhaSegura":
    st.warning("Senha incorreta! Acesso negado.")
    st.stop()

# Sele√ß√£o de idioma
col_lang1, col_lang2 = st.columns([1,1])
with col_lang1:
    if st.button("üáßüá∑ Portugu√™s"):
        idioma = "pt"
with col_lang2:
    if st.button("üá∫üá∏ English"):
        idioma = "en"

if 'idioma' not in st.session_state:
    st.session_state.idioma = idioma if 'idioma' in locals() else "pt"
else:
    if 'idioma' in locals():
        st.session_state.idioma = idioma

idioma = st.session_state.idioma

# ==============================
# 1Ô∏è‚É£ Dicion√°rio de labels
# ==============================
labels = {
    "pt": {
        "nome_analista": "Nome do Analista",
        "informe_analista": "Por favor, informe o nome do analista para prosseguir.",
        "informacoes_cliente": "üìå Informa√ß√µes do Cliente",
        "perfil_credito": "PERFIL DE CR√âDITO",
        "risco_credito_externo": "Risco de Cr√©dito Externo",
        "calcular": "üí° Calcular An√°lise Financeira",
        "exportar_pdf": "üìÑ Exportar PDF",
        "recomendacoes": "üìù Recomenda√ß√µes",
        "nome_cliente": "Nome do Cliente",
        "data_analise": "Data da An√°lise",
        "contas_receber": "Contas a Receber (R$)",
        "ativo_circ": "Ativo Circulante (R$)",
        "estoque": "Estoques (R$)",
        "ativo_total": "Ativo Total (R$)",
        "receita": "Receita L√≠quida (R$)",
        "ebitda": "EBITDA (R$)",
        "caixa": "Caixa Dispon√≠vel (R$)",
        "passivo_circ": "Passivo Circulante (R$)",
        "passivo_total": "Passivo Total (R$)",
        "dividas": "D√≠vidas Totais (R$)",
        "patrimonio": "Patrim√¥nio L√≠quido (R$)",
        "lucro": "Lucro L√≠quido (R$)",
        "prazo_faturamento": "Prazo m√©dio de faturamento (dias)"
    },
    "en": {
        "nome_analista": "Analyst Name",
        "informe_analista": "Please provide the analyst's name to proceed.",
        "informacoes_cliente": "üìå Client Information",
        "perfil_credito": "CREDIT PROFILE",
        "risco_credito_externo": "External Credit Risk",
        "calcular": "üí° Calculate Financial Analysis",
        "exportar_pdf": "üìÑ Export PDF",
        "recomendacoes": "üìù Recommendations",
        "nome_cliente": "Client Name",
        "data_analise": "Analysis Date",
        "contas_receber": "Accounts Receivable (R$)",
        "ativo_circ": "Current Assets (R$)",
        "estoque": "Inventory (R$)",
        "ativo_total": "Total Assets (R$)",
        "receita": "Net Revenue (R$)",
        "ebitda": "EBITDA (R$)",
        "caixa": "Available Cash (R$)",
        "passivo_circ": "Current Liabilities (R$)",
        "passivo_total": "Total Liabilities (R$)",
        "dividas": "Total Debts (R$)",
        "patrimonio": "Equity (R$)",
        "lucro": "Net Profit (R$)",
        "prazo_faturamento": "Average Billing Term (days)"
    }
}

def txt(key):
    return labels[idioma][key]

# ==============================
# 2Ô∏è‚É£ Fun√ß√£o de an√°lise financeira
# ==============================
def analise_financeira(
        contas_receber, receita, ativo_circ, estoque, ativo_total,
        passivo_circ, passivo_total, dividas, patrimonio, lucro, ebitda,
        caixa, prazo_faturamento, perfil="NORMAL", risco_credito_externo="M√©dio Risco"
    ):
    indicadores = {}
    
    # --- Liquidez ---
    indicadores['Liquidez Corrente'] = round((ativo_circ / passivo_circ) if passivo_circ else 0, 2)
    indicadores['Liquidez Seca'] = round(((ativo_circ - estoque) / passivo_circ) if passivo_circ else 0, 2)
    
    # --- Estrutura de Capital ---
    indicadores['Endividamento Total (%)'] = round((passivo_total / ativo_total) * 100 if ativo_total else 0, 2)
    indicadores['Composi√ß√£o do Endividamento (%)'] = round((passivo_circ / passivo_total) * 100 if passivo_total else 0, 2)
    indicadores['Alavancagem (D√≠vida / PL)'] = round((dividas / patrimonio) if patrimonio else 0, 2)
    
    # --- Rentabilidade ---
    indicadores['Margem L√≠quida (%)'] = round((lucro / receita) * 100 if receita else 0, 2)
    indicadores['EBITDA / Receita (%)'] = round((ebitda / receita) * 100 if receita else 0, 2)
    indicadores['ROE (%)'] = round((lucro / patrimonio) * 100 if patrimonio else 0, 2)
    
    # --- Score para Rating ---
    score = 0
    if indicadores['Endividamento Total (%)'] < 50: score += 2
    if indicadores['Liquidez Corrente'] > 1.2: score += 2
    if indicadores['Liquidez Seca'] > 1: score += 1
    if indicadores['Margem L√≠quida (%)'] > 10: score += 2
    if indicadores['EBITDA / Receita (%)'] > 15: score += 1
    if indicadores['ROE (%)'] > 10: score += 1

    # Rating interno
    if score >= 9:
        rating = "A"
    elif score >= 7:
        rating = "B"
    elif score >= 5:
        rating = "C"
    elif score >= 3:
        rating = "D"
    else:
        rating = "E"

    indicadores['Rating Interno'] = rating

    # Ajuste pelo risco externo
    def ajustar_rating_com_risco_externo(rating_interno, risco_externo):
        ordem_rating = ["A", "B", "C", "D", "E"]
        idx = ordem_rating.index(rating_interno)
        impacto = {
            "Muito Baixo Risco": -1, "Baixo Risco": -1, "M√©dio Risco": 0, "Alto Risco": 1, "Muito Alto Risco": 1,
            "Very Low Risk": -1, "Low Risk": -1, "Medium Risk": 0, "High Risk": 1, "Very High Risk": 1
        }
        novo_idx = idx + impacto.get(risco_externo, 0)
        novo_idx = min(max(novo_idx, 0), len(ordem_rating)-1)
        return ordem_rating[novo_idx]

    rating_final = ajustar_rating_com_risco_externo(rating, risco_credito_externo)
    indicadores['Rating do Cliente'] = rating_final

    # ==============================
    # üö® NOVA L√ìGICA DO LIMITE
    # ==============================
    fatura_mensal = (contas_receber / prazo_faturamento) * 30

    # Fator de prazo (m√°x +10%)
    fator_prazo = 1 + min(prazo_faturamento / 120, 0.1)

    # Fator de rating
    rating_map = {"A":1.0, "B":0.9, "C":0.7, "D":0.5, "E":0.3}
    fator_rating = rating_map.get(rating_final, 1)

    # Fator de margem
    fator_margem = 1 + min(indicadores['Margem L√≠quida (%)'], 15) / 100
    fator_margem = min(fator_margem, 1)

    # Fator de caixa
    fator_caixa = 0.3 + min(caixa / (dividas + 1e-6), 0.5)
    fator_caixa = min(fator_caixa, 1)

    # Fator de passivo
    comp_passivo_circ = indicadores['Composi√ß√£o do Endividamento (%)'] / 100
    if comp_passivo_circ > 0.6:
        fator_passivo = 0.5
    elif comp_passivo_circ > 0.4:
        fator_passivo = 0.7
    else:
        fator_passivo = 1

    # Fator de alavancagem
    if indicadores['Alavancagem (D√≠vida / PL)'] > 5:
        fator_alavancagem = 0.5
    elif indicadores['Alavancagem (D√≠vida / PL)'] > 3:
        fator_alavancagem = 0.7
    else:
        fator_alavancagem = 1

    # Limite final
    limite_credito_ajustado = (
        fatura_mensal * fator_prazo * fator_rating *
        fator_margem * fator_caixa * fator_passivo * fator_alavancagem
    )

    # Ajuste de perfil pessimista
    if perfil.upper() == "PESSIMISTA":
        limite_credito_ajustado *= 0.7

    # Rating E = limite m√≠nimo
    if rating_final == "E":
        limite_credito_ajustado = 1

    indicadores['Limite de Cr√©dito Sugerido (R$)'] = round(limite_credito_ajustado, 2)
    return indicadores

# ==============================
# 3Ô∏è‚É£ Recomenda√ß√µes
# ==============================
def recomendacoes(rating, idioma="pt"):
    rec_pt = {
        "A": "Cliente saud√°vel para cr√©dito. Monitorar apenas fluxos futuros.",
        "B": "Cliente com bom hist√≥rico. Revisar condi√ß√µes de pagamento peri√≥dicas.",
        "C": "Risco moderado. Avaliar garantias e limites de cr√©dito.",
        "D": "Risco elevado. Exigir garantias adicionais e reduzir limites.",
        "E": "Alto risco. Evitar concess√£o de cr√©dito sem garantias s√≥lidas."
    }
    rec_en = {
        "A": "Healthy client. Monitor future cash flows only.",
        "B": "Good history client. Periodically review payment conditions.",
        "C": "Moderate risk. Evaluate guarantees and credit limits.",
        "D": "High risk. Require additional guarantees and reduce limits.",
        "E": "Very high risk. Avoid granting credit without solid guarantees."
    }
    return rec_pt.get(rating) if idioma=="pt" else rec_en.get(rating)

# ==============================
# 4Ô∏è‚É£ Layout Interativo
# ==============================
st.subheader(txt("informacoes_cliente"))
col1, col2 = st.columns(2)

with col1:
    nome_cliente = st.text_input(txt("nome_cliente"))
    data_analise = st.date_input(txt("data_analise"), datetime.date.today())
    contas_receber = st.number_input(txt("contas_receber"), min_value=0.0)
    ativo_circ = st.number_input(txt("ativo_circ"), min_value=0.0)
    estoque = st.number_input(txt("estoque"), min_value=0.0)
    ativo_total = st.number_input(txt("ativo_total"), min_value=0.0)
    receita = st.number_input(txt("receita"), min_value=0.0)
    ebitda = st.number_input(txt("ebitda"), min_value=0.0)
    caixa = st.number_input(txt("caixa"), min_value=0.0)
    risco_credito_externo = st.selectbox(
        txt("risco_credito_externo"),
        ["Muito Baixo Risco","Baixo Risco","M√©dio Risco","Alto Risco","Muito Alto Risco"]
        if idioma=="pt" else ["Very Low Risk","Low Risk","Medium Risk","High Risk","Very High Risk"]
    )

with col2:
    passivo_circ = st.number_input(txt("passivo_circ"), min_value=0.0)
    passivo_total = st.number_input(txt("passivo_total"), min_value=0.0)
    dividas = st.number_input(txt("dividas"), min_value=0.0)
    patrimonio = st.number_input(txt("patrimonio"), min_value=0.0)
    lucro = st.number_input(txt("lucro"))
    prazo_faturamento = st.number_input(txt("prazo_faturamento"), min_value=1)

perfil = st.selectbox(
    txt("perfil_credito"),
    ["NORMAL","PESSIMISTA"] if idioma=="pt" else ["NORMAL","PESSIMISTIC"]
)

# ==============================
# 5Ô∏è‚É£ Bot√£o de c√°lculo
# ==============================
if st.button(txt("calcular")):
    resultado = analise_financeira(
        contas_receber, receita, ativo_circ, estoque, ativo_total,
        passivo_circ, passivo_total, dividas, patrimonio, lucro, ebitda,
        caixa, prazo_faturamento, perfil=perfil,
        risco_credito_externo=risco_credito_externo
    )

    # ----- KPIs -----
    st.subheader("üìä KPIs Financeiros")
    kpis = {
        "Liquidez Corrente": ("üü¢" if resultado['Liquidez Corrente']>1.2 else "üü†", resultado['Liquidez Corrente']),
        "Liquidez Seca": ("üü¢" if resultado['Liquidez Seca']>1 else "üü†", resultado['Liquidez Seca']),
        "Endividamento Total (%)": ("üü¢" if resultado['Endividamento Total (%)']<50 else "üî¥", resultado['Endividamento Total (%)']),
        "Composi√ß√£o do Endividamento (%)": ("üü¢" if resultado['Composi√ß√£o do Endividamento (%)']<50 else "üü†", resultado['Composi√ß√£o do Endividamento (%)']),
        "Alavancagem (D√≠vida / PL)": ("üü†" if resultado['Alavancagem (D√≠vida / PL)']>5 else "üü¢", resultado['Alavancagem (D√≠vida / PL)']),
        "Margem L√≠quida (%)": ("üü¢" if resultado['Margem L√≠quida (%)']>10 else "üü†", resultado['Margem L√≠quida (%)']),
        "EBITDA / Receita (%)": ("üü¢" if resultado['EBITDA / Receita (%)']>15 else "üü†", resultado['EBITDA / Receita (%)']),
        "ROE (%)": ("üü¢" if resultado['ROE (%)']>10 else "üü†", resultado['ROE (%)']),
        "Limite de Cr√©dito Sugerido (R$)": ("üü¢", resultado['Limite de Cr√©dito Sugerido (R$)'])
    }
    for k,(emoji,v) in kpis.items():
        st.metric(label=f"{emoji} {k}", value=f"R$ {v:,.2f}" if "R$" in k else f"{v:.2f}")

    rating = resultado['Rating do Cliente']
    cores_rating = {"A":"green","B":"blue","C":"yellow","D":"orange","E":"red"}
    st.markdown(f"**‚≠ê Rating do Cliente:** <span style='color:{cores_rating[rating]}; font-size:20px'>{rating}</span>", unsafe_allow_html=True)

    st.subheader(txt("recomendacoes"))
    st.info(recomendacoes(rating, idioma))

    # ----- PDF -----
    st.subheader(txt("exportar_pdf"))
    pdf_buffer = io.BytesIO()
    with PdfPages(pdf_buffer) as pdf:
        plt.figure(figsize=(8,11))
        plt.axis('off')
        texto = f"Relat√≥rio Financeiro do Cliente\n\n"
        texto += f"Cliente: {nome_cliente}\nData da An√°lise: {data_analise}\n"
        texto += f"Analista: {nome_analista}\nObserva√ß√£o: Este relat√≥rio √© apenas uma sugest√£o.\n\n"
        texto += f"Risco de Cr√©dito Externo: {risco_credito_externo}\n"
        texto += f"=== Inputs Registrados ===\n"
        texto += f"Contas a Receber: R$ {contas_receber:,.2f}\nAtivo Circulante: R$ {ativo_circ:,.2f}\nEstoques: R$ {estoque:,.2f}\nAtivo Total: R$ {ativo_total:,.2f}\n"
        texto += f"Receita L√≠quida: R$ {receita:,.2f}\nEBITDA: R$ {ebitda:,.2f}\nCaixa: R$ {caixa:,.2f}\n"
        texto += f"Passivo Circulante: R$ {passivo_circ:,.2f}\nPassivo Total: R$ {passivo_total:,.2f}\nD√≠vidas Totais: R$ {dividas:,.2f}\nPatrim√¥nio L√≠quido: R$ {patrimonio:,.2f}\nLucro L√≠quido: R$ {lucro:,.2f}\n"
        texto += f"Prazo m√©dio de faturamento: {prazo_faturamento} dias\nPerfil de Cr√©dito: {perfil}\n\n"
        texto += f"=== Indicadores Calculados ===\n"
        for k,v in resultado.items():
            texto += f"{k}: {v}\n"
        plt.text(0,1, texto, ha='left', va='top', fontsize=10, wrap=True)
        pdf.savefig()
        plt.close()
    pdf_buffer.seek(0)
    st.download_button(label="üì• Baixar PDF", data=pdf_buffer, file_name=f"Relatorio_{nome_cliente}.pdf", mime="application/pdf")
