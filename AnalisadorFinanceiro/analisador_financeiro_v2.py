# -*- coding: utf-8 -*-
"""Analisador Financeiro V2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KSwhMO_2MysN-c6GuPZgl3tWv3ysM63s
"""

# -*- coding: utf-8 -*-
"""Analisador Financeiro Profissional"""

import streamlit as st
import datetime
import io
from reportlab.lib import colors
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, Image, PageBreak

# ==============================
# 0Ô∏è‚É£ Configura√ß√µes iniciais
# ==============================
st.set_page_config(page_title="Analisador Financeiro", layout="wide")
st.title("üîí Analisador Financeiro de Clientes")

# ==============================
# 0.1 Autentica√ß√£o
# ==============================
if 'autenticado' not in st.session_state:
    st.session_state['autenticado'] = False

if not st.session_state['autenticado']:
    nome_analista = st.text_input("Nome do Analista")
    senha = st.text_input("Digite a senha para acessar o app", type="password")
    
    if st.button("üîë Entrar"):
        if not nome_analista:
            st.warning("Informe o nome do analista.")
        elif senha != "minhaSenhaSegura":
            st.error("Senha incorreta! Acesso negado.")
        else:
            st.session_state['autenticado'] = True
            st.session_state['nome_analista'] = nome_analista
            st.success(f"Bem-vindo(a), {nome_analista}!")
    st.stop()

nome_analista = st.session_state['nome_analista']

# ==============================
# 1Ô∏è‚É£ Inputs do cliente
# ==============================
st.subheader("üìå Informa√ß√µes do Cliente")
col1, col2 = st.columns(2)

with col1:
    nome_cliente = st.text_input("Nome do Cliente")
    data_analise = st.date_input("Data da An√°lise", datetime.date.today())
    contas_receber = st.number_input("Contas a Receber (R$)", min_value=0.0)
    ativo_circ = st.number_input("Ativo Circulante (R$)", min_value=0.0)
    estoque = st.number_input("Estoques (R$)", min_value=0.0)
    ativo_total = st.number_input("Ativo Total (R$)", min_value=0.0)
    receita = st.number_input("Receita L√≠quida (R$)", min_value=0.0)
    ebitda = st.number_input("EBITDA (R$)", min_value=0.0)
    caixa = st.number_input("Caixa Dispon√≠vel (R$)", min_value=0.0)
    risco_credito_externo = st.selectbox("Risco de Cr√©dito Externo",
                                         ["Muito Baixo Risco", "Baixo Risco", "M√©dio Risco", "Alto Risco", "Muito Alto Risco"])

with col2:
    passivo_circ = st.number_input("Passivo Circulante (R$)", min_value=0.0)
    passivo_total = st.number_input("Passivo Total (R$)", min_value=0.0)
    dividas = st.number_input("D√≠vidas Totais (R$)", min_value=0.0)
    patrimonio = st.number_input("Patrim√¥nio L√≠quido (R$)", min_value=0.0)
    lucro = st.number_input("Lucro L√≠quido (R$)", min_value=0.0)
    prazo_faturamento = st.number_input("Prazo m√©dio de faturamento (dias)", min_value=1)
    perfil = st.selectbox("Perfil de Cr√©dito", ["NORMAL", "PESSIMISTA"])

# ==============================
# 2Ô∏è‚É£ Fun√ß√£o de an√°lise financeira
# ==============================
def analise_financeira(contas_receber, receita, ativo_circ, estoque, ativo_total,
                       passivo_circ, passivo_total, dividas, patrimonio, lucro, ebitda,
                       caixa, prazo_faturamento, perfil="NORMAL", risco_credito_externo="M√©dio Risco"):

    indicadores = {}
    indicadores['Liquidez Corrente'] = round((ativo_circ / passivo_circ) if passivo_circ else 0, 2)
    indicadores['Liquidez Seca'] = round(((ativo_circ - estoque) / passivo_circ) if passivo_circ else 0, 2)
    indicadores['Endividamento Total (%)'] = round((passivo_total / ativo_total) * 100 if ativo_total else 0, 2)
    indicadores['Composi√ß√£o do Endividamento (%)'] = round((passivo_circ / passivo_total) * 100 if passivo_total else 0, 2)
    indicadores['Alavancagem (D√≠vida / PL)'] = round((dividas / patrimonio) if patrimonio else 0, 2)
    indicadores['Margem L√≠quida (%)'] = round((lucro / receita) * 100 if receita else 0, 2)
    indicadores['EBITDA / Receita (%)'] = round((ebitda / receita) * 100 if receita else 0, 2)
    indicadores['ROE (%)'] = round((lucro / patrimonio) * 100 if patrimonio else 0, 2)

    # Score e rating interno
    score = 0
    if indicadores['Endividamento Total (%)'] < 50: score += 2
    if indicadores['Liquidez Corrente'] > 1.2: score += 2
    if indicadores['Liquidez Seca'] > 1: score += 1
    if indicadores['Margem L√≠quida (%)'] > 10: score += 2
    if indicadores['EBITDA / Receita (%)'] > 15: score += 1
    if indicadores['ROE (%)'] > 10: score += 1

    if score >= 9: rating = "A"
    elif score >= 7: rating = "B"
    elif score >= 5: rating = "C"
    elif score >= 3: rating = "D"
    else: rating = "E"

    ordem_rating = ["A", "B", "C", "D", "E"]
    impacto = {"Muito Baixo Risco": -1, "Baixo Risco": -1, "M√©dio Risco":0,
               "Alto Risco":1, "Muito Alto Risco":1}
    idx = ordem_rating.index(rating)
    novo_idx = min(max(idx + impacto.get(risco_credito_externo, 0), 0), 4)
    rating_final = ordem_rating[novo_idx]
    indicadores['Rating do Cliente'] = rating_final

    # Limite de cr√©dito
    fatura_mensal = (contas_receber / prazo_faturamento) * 30
    fator_prazo = 1 + min(prazo_faturamento/120, 0.1)
    rating_map = {"A":1.0,"B":0.9,"C":0.7,"D":0.5,"E":0.3}
    fator_rating = rating_map.get(rating_final, 1)
    fator_margem = min(1, 1 + min(indicadores['Margem L√≠quida (%)'],15)/100)
    fator_caixa = min(1, 0.3 + min(caixa/(dividas+1e-6),0.5))
    comp_passivo_circ = indicadores['Composi√ß√£o do Endividamento (%)']/100
    if comp_passivo_circ>0.6: fator_passivo = 0.5
    elif comp_passivo_circ>0.4: fator_passivo = 0.7
    else: fator_passivo = 1
    if indicadores['Alavancagem (D√≠vida / PL)']>5: fator_alavancagem = 0.5
    elif indicadores['Alavancagem (D√≠vida / PL)']>3: fator_alavancagem = 0.7
    else: fator_alavancagem =1
    limite_credito = fatura_mensal * fator_prazo * fator_rating * fator_margem * fator_caixa * fator_passivo * fator_alavancagem
    if perfil.upper()=="PESSIMISTA": limite_credito *=0.7
    if rating_final=="E": limite_credito = 1
    indicadores['Limite de Cr√©dito Sugerido (R$)'] = round(limite_credito,2)
    return indicadores

# ==============================
# 3Ô∏è‚É£ Recomenda√ß√µes
# ==============================
def recomendacoes(rating):
    rec = {
        "A":"Cliente saud√°vel para cr√©dito. Monitorar apenas fluxos futuros.",
        "B":"Cliente com bom hist√≥rico. Revisar condi√ß√µes de pagamento peri√≥dicas.",
        "C":"Risco moderado. Avaliar garantias e limites de cr√©dito.",
        "D":"Risco elevado. Exigir garantias adicionais e reduzir limites.",
        "E":"Alto risco. Evitar concess√£o de cr√©dito sem garantias s√≥lidas."
    }
    return rec.get(rating)

# ==============================
# 4Ô∏è‚É£ Bot√£o de c√°lculo e exibi√ß√£o KPIs
# ==============================
if st.button("üí° Calcular An√°lise Financeira"):
    st.session_state['resultado'] = analise_financeira(contas_receber, receita, ativo_circ, estoque, ativo_total,
                                   passivo_circ, passivo_total, dividas, patrimonio, lucro, ebitda,
                                   caixa, prazo_faturamento, perfil, risco_credito_externo)
    st.success("‚úÖ An√°lise Financeira Calculada com sucesso!")

if 'resultado' in st.session_state:
    resultado = st.session_state['resultado']
    st.subheader("üìä KPIs Financeiros")
    for k,v in resultado.items():
        st.metric(label=k, value=f"R$ {v:,.2f}" if "R$" in k else f"{v}")

    st.subheader("üìù Recomenda√ß√£o")
    st.info(recomendacoes(resultado['Rating do Cliente']))

# ==============================
# 5Ô∏è‚É£ Fun√ß√£o para gerar PDF profissional
# ==============================
def gerar_pdf(nome_cliente, data_analise, nome_analista, risco_credito_externo,
              contas_receber, ativo_circ, estoque, ativo_total, receita, ebitda, caixa,
              passivo_circ, passivo_total, dividas, patrimonio, lucro, prazo_faturamento,
              perfil, resultado, recomendacao, logo_path=""):

    buffer = io.BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4)
    styles = getSampleStyleSheet()
    styleN = styles['Normal']
    styleH = styles['Heading1']

    elementos = []

    # Capa
    if logo_path:
        try:
            elementos.append(Image(logo_path, width=100, height=50))
        except: pass
    elementos.append(Paragraph("<b>Relat√≥rio Financeiro Corporativo</b>", styleH))
    elementos.append(Spacer(1,20))
    elementos.append(Paragraph(f"Cliente: {nome_cliente}", styleN))
    elementos.append(Paragraph(f"Analista: {nome_analista}", styleN))
    elementos.append(Paragraph(f"Data da An√°lise: {data_analise}", styleN))
    elementos.append(Spacer(1,30))
    elementos.append(Paragraph("Este relat√≥rio tem car√°ter corporativo e cont√©m todas as informa√ß√µes financeiras do cliente, incluindo indicadores de liquidez, rentabilidade, endividamento e recomenda√ß√µes de cr√©dito.", styleN))
    elementos.append(PageBreak())

    # Se√ß√£o Inputs
    elementos.append(Paragraph("üìå Informa√ß√µes Registradas", styles["Heading2"]))
    dados_inputs = [
        ["Contas a Receber", f"R$ {contas_receber:,.2f}"],
        ["Ativo Circulante", f"R$ {ativo_circ:,.2f}"],
        ["Estoques", f"R$ {estoque:,.2f}"],
        ["Ativo Total", f"R$ {ativo_total:,.2f}"],
        ["Receita L√≠quida", f"R$ {receita:,.2f}"],
        ["EBITDA", f"R$ {ebitda:,.2f}"],
        ["Caixa", f"R$ {caixa:,.2f}"],
        ["Passivo Circulante", f"R$ {passivo_circ:,.2f}"],
        ["Passivo Total", f"R$ {passivo_total:,.2f}"],
        ["D√≠vidas Totais", f"R$ {dividas:,.2f}"],
        ["Patrim√¥nio L√≠quido", f"R$ {patrimonio:,.2f}"],
        ["Lucro L√≠quido", f"R$ {lucro:,.2f}"],
        ["Prazo M√©dio de Faturamento", f"{prazo_faturamento} dias"],
        ["Perfil de Cr√©dito", perfil],
        ["Risco de Cr√©dito Externo", risco_credito_externo]
    ]
    tabela_inputs = Table(dados_inputs, colWidths=[200,250])
    tabela_inputs.setStyle(TableStyle([("BACKGROUND",(0,0),(0,-1),colors.whitesmoke),
                                       ("GRID",(0,0),(-1,-1),0.5,colors.grey)]))
    elementos.append(tabela_inputs)
    elementos.append(Spacer(1,20))

    # KPIs
    elementos.append(Paragraph("üìä Indicadores Calculados", styles["Heading2"]))
    dados_indicadores = [[k,f"{v}"] for k,v in resultado.items()]
    tabela_indicadores = Table(dados_indicadores, colWidths=[250,200])
    tabela_indicadores.setStyle(TableStyle([("BACKGROUND",(0,0),(0,-1),colors.whitesmoke),
                                            ("GRID",(0,0),(-1,-1),0.5,colors.grey)]))
    elementos.append(tabela_indicadores)
    elementos.append(Spacer(1,20))

    # Recomenda√ß√µes
    elementos.append(Paragraph("üìù Recomenda√ß√µes", styles["Heading2"]))
    elementos.append(Paragraph(recomendacao, styleN))
    elementos.append(Spacer(1,40))

    # Assinatura
    elementos.append(Paragraph("__________________________________", styleN))
    elementos.append(Paragraph(f"Assinatura do Analista - {nome_analista}", styleN))

    doc.build(elementos)
    buffer.seek(0)
    return buffer

